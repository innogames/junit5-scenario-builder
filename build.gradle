import java.util.regex.Pattern
import org.gradle.util.internal.VersionNumber

plugins {
	id 'me.qoomon.git-versioning' version "$gitVersioningPluginVersion"
	id 'io.github.gradle-nexus.publish-plugin' version "$gradleNexusPublishPluginVersion"
}

group 'com.innogames'
version '0.0.0-SNAPSHOT'
def javaVersion = 11
def gitRepository = 'innogames/junit5-scenario-builder'

def setVersionFromGit() {
	// Set project version based on git branch or tag using the git-versioning plugin.
	// Version can also be explicitly defined. For example:
	//   gradle -Dgit.ref=$PROVIDED_REF
	//   gradle -Dgit.branch=$PROVIDED_BRANCH_NAME
	//   gradle -Dgit.tag=$PROVIDED_TAG_NAME
	// (See also https://github.com/qoomon/gradle-git-versioning-plugin)
	gitVersioning.apply {
		refs {
			branch('.+') {
				describeTagPattern = Pattern.compile('v(?<version>.*)')
				version = '${describe.tag.version:-0.0.0}-SNAPSHOT'
			}
			tag('v(?<version>.*)') {
				version = '${ref.version}'
			}
		}
	}

	// Use the next minor version if the determined version is a SNAPSHOT version
	VersionNumber current = VersionNumber.parse(project.version)
	if (current.qualifier == 'SNAPSHOT') {
		logger.info('Found SNAPSHOT version. Increase minor version')
		def newVersion = new VersionNumber(current.major, current.minor + 1, 0, current.qualifier)
		project.setVersion(newVersion.toString())
	}

	logger.info("-------------------------------------------")
	logger.info("Current project version: ${project.version}")
	logger.info("-------------------------------------------")
}

setVersionFromGit()

allprojects {
	repositories {
		mavenCentral()
	}
}

def javaProjects = subprojects.findAll {
	return it.name != 'projects'
}

configure(javaProjects) { project ->
	group = rootProject.group
	version = rootProject.version

	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(javaVersion)
		}
		withJavadocJar()
		withSourcesJar()
	}

	test {
		useJUnitPlatform()
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java

				afterEvaluate {
					pom {
						name = project.name
						description = project.description
						url = "https://github.com/${gitRepository}"
						licenses {
							license {
								name = 'MIT License'
								url = 'https://opensource.org/licenses/MIT'
							}
						}
						developers {
							developer {
								name = 'Christian Blos'
								email = 'christian.blos@innogames.com'
								organization = 'InnoGames GmbH'
								organizationUrl = 'https://www.innogames.com/'
							}
						}
						scm {
							connection = "scm:git:git://github.com/${gitRepository}.git"
							developerConnection = "scm:git:ssh://github.com:${gitRepository}.git"
							url = "https://github.com/${gitRepository}"
						}
					}
				}
			}
		}

		repositories {
			maven {
				def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
				def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			}
		}

		def signingKeyId = findProperty('signing.keyId')
		if (signingKeyId) {
			signing {
				// Use ascii-armored key when SIGNING_KEY environment variable is set.
				// If not, signing.secretKeyRingFile property should be present.
				def signingKey = System.getenv('SIGNING_KEY')
				if (signingKey) {
					useInMemoryPgpKeys(signingKeyId, signingKey, findProperty('signing.password'))
				}
				sign publishing.publications.mavenJava
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			username = findProperty('ossrhUsername')
			password = findProperty('ossrhPassword')
		}
	}
}

/**
 * Updates the version mentioned in the docs. It will use the determined version based on the
 * current git branch or tag. You can use a specific version via -Dgit.tag=version system prop.
 * E.g. `gradle -Dgit.tag=v0.1.0 updateDocumentedVersion`
 */
tasks.register('updateDocumentedVersion') {
	doFirst {
		File docsFile = file('docs/getting-started.md')
		docsFile.write(docsFile.getText()
			.replaceAll('<version>[0-9a-zA-Z.-]+</version>', "<version>${project.version}</version>")
			.replaceAll('(com.innogames:junit5-scenario-builder:)[0-9a-zA-Z.-]+', "\$1${project.version}"))
	}
}